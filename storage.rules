service firebase.storage {
  match /b/{bucket}/o {

    /// RULES ///
    //match /{allPaths=**} {
      //allow read;
      //allow write: if isSignedIn();
    //}

    match /{allImages=**} {
      allow read;
    }

    match /users/{uid}/{allPaths=**} {
      allow write: if isOneOfRoles(resource, ['editor', 'admin']) || isOwner(uid);
    }

    match /books/{bid}/{allPaths=**} {
      allow write: if isOneOfRoles(resource, ['editor', 'admin']);
    }

    match /authors/{aid}/{allPaths=**} {
      allow write: if isOneOfRoles(resource, ['editor', 'admin']);
    }

    match /collections/{cid}/{allPaths=**} {
      allow write: if isOneOfRoles(resource, ['editor', 'admin']);
    }

    match /admin/{allPaths=**} {
    	allow read, write: if isOneOfRoles(resource, ['admin']);
    }

    /// FUNCTIONS ///
    function isSignedIn() {
      return request.auth != null;
    }

    function getRole(rsc) {
      return rsc.data.roles[request.auth.uid];
    }

    function isOneOfRoles(rsc, array) {
      return isSignedIn() && (getRole(rsc) in array);
    }

    function isOwner(uid) {
      return request.auth.uid == uid;
    }

    function emailVerified() {
      return request.auth.token.email_verified;
    }

    function existingData() {
      return resource.data;
    }

    function incomingData() {
      return request.resource.data;
    }

    function currentUser() {
      return request.auth;
    }

    function isValidUser() {
      return incomingData().keys().hasAll([
        'creationTime', 
        'uid', 
        'displayName', 
        'email', 
        'roles', 
        'stats'
      ]);
    }
  }
}
